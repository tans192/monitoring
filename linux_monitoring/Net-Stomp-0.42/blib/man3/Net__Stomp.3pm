.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Stomp 3"
.TH Net::Stomp 3 "2011-08-20" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Stomp \- A Streaming Text Orientated Messaging Protocol Client
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  # send a message to the queue \*(Aqfoo\*(Aq
\&  use Net::Stomp;
\&  my $stomp = Net::Stomp\->new( { hostname => \*(Aqlocalhost\*(Aq, port => \*(Aq61613\*(Aq } );
\&  $stomp\->connect( { login => \*(Aqhello\*(Aq, passcode => \*(Aqthere\*(Aq } );
\&  $stomp\->send(
\&      { destination => \*(Aq/queue/foo\*(Aq, body => \*(Aqtest message\*(Aq } );
\&  $stomp\->disconnect;
\&
\&  # subscribe to messages from the queue \*(Aqfoo\*(Aq
\&  use Net::Stomp;
\&  my $stomp = Net::Stomp\->new( { hostname => \*(Aqlocalhost\*(Aq, port => \*(Aq61613\*(Aq } );
\&  $stomp\->connect( { login => \*(Aqhello\*(Aq, passcode => \*(Aqthere\*(Aq } );
\&  $stomp\->subscribe(
\&      {   destination             => \*(Aq/queue/foo\*(Aq,
\&          \*(Aqack\*(Aq                   => \*(Aqclient\*(Aq,
\&          \*(Aqactivemq.prefetchSize\*(Aq => 1
\&      }
\&  );
\&  while (1) {
\&    my $frame = $stomp\->receive_frame;
\&    warn $frame\->body; # do something here
\&    $stomp\->ack( { frame => $frame } );
\&  }
\&  $stomp\->disconnect;
\&
\&  # write your own frame
\&  my $frame = Net::Stomp::Frame\->new(
\&       { command => $command, headers => $conf, body => $body } );
\&  $self\->send_frame($frame);
\&
\&  # connect with failover supporting similar URI to ActiveMQ
\&  $stomp = Net::Stomp\->new({ failover => "failover://tcp://primary:61616" })
\&  # "?randomize=..." and other parameters are ignored currently
\&  $stomp = Net::Stomp\->new({ failover => "failover:(tcp://primary:61616,tcp://secondary:61616)?randomize=false" })
\&
\&  # Or in a more natural perl way
\&  $stomp = Net::Stomp\->new({ hosts => [
\&    { hostname => \*(Aqprimary\*(Aq, port => 61616 },
\&    { hostname => \*(Aqsecondary\*(Aq, port => 61616 },
\&  ] });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows you to write a Stomp client. Stomp is the Streaming
Text Orientated Messaging Protocol (or the Protocol Briefly Known as
\&\s-1TTMP\s0 and Represented by the symbol :ttmp). It's a simple and easy to
implement protocol for working with Message Orientated Middleware from
any language. Net::Stomp is useful for talking to Apache ActiveMQ,
an open source (Apache 2.0 licensed) Java Message Service 1.1 (\s-1JMS\s0)
message broker packed with many enterprise features.
.PP
A Stomp frame consists of a command, a series of headers and a body \-
see Net::Stomp::Frame for more details.
.PP
For details on the protocol see <http://stomp.codehaus.org/Protocol>.
.PP
To enable the ActiveMQ Broker for Stomp add the following to the
activemq.xml configuration inside the <transportConnectors> section:
.PP
.Vb 1
\&  <transportConnector name="stomp" uri="stomp://localhost:61613"/>
.Ve
.PP
To enable the ActiveMQ Broker for Stomp and \s-1SSL\s0 add the following
inside the <transportConnectors> section:
.PP
.Vb 1
\&  <transportConnector name="stomp+ssl" uri="stomp+ssl://localhost:61612"/>
.Ve
.PP
For details on Stomp in ActiveMQ See <http://activemq.apache.org/stomp.html>.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
The constructor creates a new object. You must pass in a hostname and
a port or set a failover configuration:
.PP
.Vb 1
\&  my $stomp = Net::Stomp\->new( { hostname => \*(Aqlocalhost\*(Aq, port => \*(Aq61613\*(Aq } );
.Ve
.PP
If you want to use \s-1SSL,\s0 make sure you have IO::Socket::SSL and
pass in the \s-1SSL\s0 flag:
.PP
.Vb 5
\&  my $stomp = Net::Stomp\->new( {
\&    hostname => \*(Aqlocalhost\*(Aq,
\&    port     => \*(Aq61612\*(Aq,
\&    ssl      => 1,
\&  } );
.Ve
.PP
If you want to pass in IO::Socket::SSL options:
.PP
.Vb 6
\&  my $stomp = Net::Stomp\->new( {
\&    hostname    => \*(Aqlocalhost\*(Aq,
\&    port        => \*(Aq61612\*(Aq,
\&    ssl         => 1,
\&    ssl_options => { SSL_cipher_list => \*(AqALL:!EXPORT\*(Aq },
\&  } );
.Ve
.PP
\fIFailover\fR
.IX Subsection "Failover"
.PP
There is experiemental failover support in Net::Stomp. You can specify failover
in a similar maner to ActiveMQ
(<http://activemq.apache.org/failover\-transport\-reference.html>) for
similarity with Java configs or using a more natural method to perl of passing
in an array-of-hashrefs in the \f(CW\*(C`hosts\*(C'\fR parameter.
.PP
Currently when ever Net::Stomp connects or reconnects it will simply try the
next host in the list.
.SS "connect"
.IX Subsection "connect"
This connects to the Stomp server. You may pass in a \f(CW\*(C`login\*(C'\fR and
\&\f(CW\*(C`passcode\*(C'\fR options.
.PP
You may also pass in 'client\-id', which specifies the \s-1JMS\s0 Client \s-1ID\s0 which is
used in combination to the activemqq.subscriptionName to denote a durable
subscriber.
.PP
.Vb 1
\&  $stomp\->connect( { login => \*(Aqhello\*(Aq, passcode => \*(Aqthere\*(Aq } );
.Ve
.SS "send"
.IX Subsection "send"
This sends a message to a queue or topic. You must pass in a destination and a
body.
.PP
.Vb 2
\&  $stomp\->send(
\&      { destination => \*(Aq/queue/foo\*(Aq, body => \*(Aqtest message\*(Aq } );
.Ve
.PP
To send a BytesMessage, you should set the field 'bytes_message' to 1.
.SS "send_transactional"
.IX Subsection "send_transactional"
This sends a message in transactional mode and fails if the receipt of the
message is not acknowledged by the server:
.PP
.Vb 3
\&  $stomp\->send_transactional(
\&      { destination => \*(Aq/queue/foo\*(Aq, body => \*(Aqtest message\*(Aq }
\&  ) or die "Couldn\*(Aqt send the message!";
.Ve
.PP
If using ActiveMQ, you might also want to make the message persistent:
.PP
.Vb 3
\&  $stomp\->send_transactional(
\&      { destination => \*(Aq/queue/foo\*(Aq, body => \*(Aqtest message\*(Aq, persistent => \*(Aqtrue\*(Aq }
\&  ) or die "Couldn\*(Aqt send the message!";
.Ve
.SS "disconnect"
.IX Subsection "disconnect"
This disconnects from the Stomp server:
.PP
.Vb 1
\&  $stomp\->disconnect;
.Ve
.SS "subscribe"
.IX Subsection "subscribe"
This subscribes you to a queue or topic. You must pass in a destination.
.PP
The acknowledge mode defaults to 'auto', which means that frames will
be considered delivered after they have been sent to a client. The
other option is 'client', which means that messages will only be
considered delivered after the client specifically acknowledges them
with an \s-1ACK\s0 frame.
.PP
Other options:
.PP
\&'selector': which specifies a \s-1JMS\s0 Selector using \s-1SQL
92\s0 syntax as specified in the \s-1JMS 1.1\s0 specificiation. This allows a
filter to be applied to each message as part of the subscription.
.PP
\&'activemq.dispatchAsync': should messages be dispatched synchronously
or asynchronously from the producer thread for non-durable topics in
the broker. For fast consumers set this to false. For slow consumers
set it to true so that dispatching will not block fast consumers.
.PP
\&'activemq.exclusive': Would I like to be an Exclusive Consumer on a queue.
.PP
\&'activemq.maximumPendingMessageLimit': For Slow Consumer Handlingon
non-durable topics by dropping old messages \- we can set a maximum
pending limit which once a slow consumer backs up to this high water
mark we begin to discard old messages.
.PP
\&'activemq.noLocal': Specifies whether or not locally sent messages
should be ignored for subscriptions. Set to true to filter out locally
sent messages.
.PP
\&'activemq.prefetchSize': Specifies the maximum number of pending
messages that will be dispatched to the client. Once this maximum is
reached no more messages are dispatched until the client acknowledges
a message. Set to 1 for very fair distribution of messages across
consumers where processing messages can be slow.
.PP
\&'activemq.priority': Sets the priority of the consumer so that
dispatching can be weighted in priority order.
.PP
\&'activemq.retroactive': For non-durable topics do you wish this
subscription to the retroactive.
.PP
\&'activemq.subscriptionName': For durable topic subscriptions you must
specify the same clientId on the connection and subscriberName on the
subscribe.
.PP
.Vb 6
\&  $stomp\->subscribe(
\&      {   destination             => \*(Aq/queue/foo\*(Aq,
\&          \*(Aqack\*(Aq                   => \*(Aqclient\*(Aq,
\&          \*(Aqactivemq.prefetchSize\*(Aq => 1
\&      }
\&  );
.Ve
.SS "unsubscribe"
.IX Subsection "unsubscribe"
This unsubscribes you to a queue or topic. You must pass in a destination:
.PP
.Vb 1
\&  $stomp\->unsubcribe({ destination => \*(Aq/queue/foo\*(Aq });
.Ve
.SS "receive_frame"
.IX Subsection "receive_frame"
This blocks and returns you the next Stomp frame.
.PP
.Vb 2
\&  my $frame = $stomp\->receive_frame;
\&  warn $frame\->body; # do something here
.Ve
.PP
The header bytes_message is 1 if the message was a BytesMessage.
.PP
By default this method will block until a frame can be returned. If you wish to
wait for a specified time pass a \f(CW\*(C`timeout\*(C'\fR argument:
.PP
.Vb 2
\&  # Wait half a second for a frame, else return undef
\&  $stomp\->receive_frame({ timeout => 0.5 })
.Ve
.SS "can_read"
.IX Subsection "can_read"
This returns whether there is new data is waiting to be read from the \s-1STOMP\s0
server. Optionally takes a timeout in seconds:
.PP
.Vb 2
\&  my $can_read = $stomp\->can_read;
\&  my $can_read = $stomp\->can_read({ timeout => \*(Aq0.1\*(Aq });
.Ve
.PP
\&\f(CW\*(C`undef\*(C'\fR says block until something can be read, \f(CW0\fR says to poll and return
immediately.
.SS "ack"
.IX Subsection "ack"
This acknowledges that you have received and processed a frame (if you
are using client acknowledgements):
.PP
.Vb 1
\&  $stomp\->ack( { frame => $frame } );
.Ve
.SS "send_frame"
.IX Subsection "send_frame"
If this module does not provide enough help for sending frames, you
may construct your own frame and send it:
.PP
.Vb 4
\&  # write your own frame
\&  my $frame = Net::Stomp::Frame\->new(
\&       { command => $command, headers => $conf, body => $body } );
\&  $self\->send_frame($frame);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Stomp::Frame.
.SH "AUTHORS"
.IX Header "AUTHORS"
Leon Brocard <acme@astray.com>,
Thom May <thom.may@betfair.com>,
Michael S. Fischer <michael@dynamine.net>,
Ash Berlin <ash_github@firemirror.com>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Paul Driver <frodwith@cpan.org>,
Andreas Faafeng <aff@cpan.org>,
Vigith Maurice <vigith@yahoo\-inc.com>,
Stephen Fralich <sjf4@uw.edu>,
Squeeks <squeek@cpan.org>,
Chisel Wright <chisel@chizography.net>,
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2006\-9, Leon Brocard
Copyright (C) 2009, Thom May, Betfair.com
Copyright (C) 2010, Ash Berlin, Net\-a\-Porter.com
Copyright (C) 2010, Michael S. Fischer
.PP
This module is free software; you can redistribute it or modify it
under the same terms as Perl itself.
